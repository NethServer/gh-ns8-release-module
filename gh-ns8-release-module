#!/usr/bin/env bash

# Enable debugging and logging of shell operations
if [ -n "$DEBUG" ]; then
set -x
PS4='+${LINENO}: '
fi

source "$(dirname "$(readlink -f "$0")")/functions.sh"

# Function to display usage instructions
function usage() {
  echo "Usage: $0 [create|check|comment|clean] --repo <repo-name> [options]"
  echo ""
  echo "Options:"
  echo "  --repo <repo-name>         The GitHub NethServer 8 module repository (e.g., owner/ns8-module)."
  echo "  --release-refs <commit-sha> Commit SHA to associate with the release."
  echo "  --release-name <name>      Specify the release name (must follow semver format)."
  echo "  --testing                  Create a testing release."
  echo "  --draft                    Create a draft release."
  echo "  -h, --help                 Display this help message."
  exit 1
}

# The first argument must be `create`, `check`, `comment`, or `clean`
if [[ "$1" =~ ^(create|check|comment|clean)$ ]]; then
  subcommand=$1
  shift
else
  echo 'The first argument must be `create`, `check`, `comment`, or `clean`'
  usage
fi

testing_arg=0
# Parse command line arguments
while [ $# -gt 0 ]; do
  case "$1" in
  --repo)
    repo_arg="$2"
    shift
    ;;
  --release-refs)
    release_refs_arg="$2"
    shift
    ;;
  --release-name)
    release_name_arg="$2"
    shift
    ;;
  --testing)
    testing_arg=1
    ;;
  --draft)
    draft_arg="--draft"
    ;;
  -h|--help)
    usage
    ;;
  *)
    echo "Unknown argument: $1"
    usage
    ;;
  esac
  shift
done

#If the argument `--repo` is not provided, get the repo from the current directory
if [ -z "$repo_arg" ]; then
  repo_arg=$(gh repo view --json owner,name --jq '.owner.login + "/" + .name')
  if [ -z "$repo_arg" ]; then
    echo "Could not determine the repo. Please provide the repo name using the --repo flag"
    exit 1
  fi
fi

#Check if the repo is a valid github repo, using the gh api
gh api repos/$repo_arg 2>&1 > /dev/null
if [ $? -ne 0 ]; then
  echo "Invalid repo: $repo_arg"
  exit 1
fi

# Check the repository has a valid NS8 module name in the format `owner/ns8-<module-name>`
if ! echo $repo_arg | grep -qE '^[^/]+/ns8-'; then
  echo "Invalid NS8 module name: $repo_arg"
  exit 1
fi

#If the argument `--release-refs` is not provided, get the latest commit of the default branch
if [ -z "$release_refs_arg" ]; then
  release_refs_arg=$(gh api repos/$repo_arg/commits --jq '.[0].sha')
  if [ -z "$release_refs_arg" ]; then
    echo "Could not determine the latest commit sha. Please provide the commit sha using the --release-refs flag"
    exit 1
  fi
else
  #Check if the commit sha is on the default branch
  default_branch=$(gh repo view --repo $repo_arg --json defaultBranchRef -q ".defaultBranchRef.name")
  commit_branch=$(gh api repos/$repo_arg/commits/$release_refs_arg/branches-where-head --jq '.[].name | select(. == $default_branch)' --arg default_branch $default_branch)
  if [ -z "$commit_branch" ]; then
    echo "The commit sha is not on the default branch: $default_branch"
    exit 1
  fi
  target="--target $release_refs_arg"
fi

# If the argument `--testing` is not provided then the `--release-name` argument must be present
if [ $testing_arg == 0 ] && [ -z "$release_name_arg" ] && [ $subcommand != "check" ] && [ $subcommand != "clean" ]; then
  echo "Please provide the release name using the --release-name flag"
  exit 1
fi

# If the argument `--release-name` is provided check if the release name is in
# valid semver format
if [ ! -z "$release_name_arg" ]; then
  if ! is_semver $release_name_arg; then
    echo "Invalid semver format for release name"
    exit 1
  fi
fi


# Check if the subcommand is `create`, `check`, `comment`, or `clean`
if [ "$subcommand" == "create" ]; then
  # Create a new release

  release_name=$release_name_arg

  if [ $testing_arg == 1 ]; then
    prerelease="--prerelease"
    if [ -z "$release_name_arg" ]; then
      release_name=$(next_testing_release $repo_arg)
      if [ "$?" -eq 1  ]; then
        echo $release_name
        exit 1
      fi
    fi
  fi

  gh release create $draft_arg $target $prerelease --repo $repo_arg --title $release_name --generate-notes $release_name

elif [ "$subcommand" == "check" ]; then
  # Get the name the latest release that is not a prerelease
  latest_release=$(gh release list  --repo $repo_arg --exclude-pre-releases --json tagName --limit 1 --order desc  --jq '.[0].tagName')

  # Get the commit sha for the latest releases
  latest_release_sha=$(gh api repos/$repo_arg/git/ref/tags/$latest_release --jq '.object.sha')
  # Check if the latest release tag is the HEAD of the main branches
  if [ "$latest_release_sha" == "$(gh api repos/$repo_arg/git/ref/heads/main --jq '.object.sha')" ]; then
    echo "The latest release tag is the HEAD of the main branch, there is nothing to release"
    exit 1
  fi

  echo "Checking PRs and issues since $latest_release..."
  echo ""

  unlinked_prs=""
  translation_prs=""
  declare -A parent_issues
  declare -A child_issues
  declare -A issue_labels
  declare -A issue_status

  if [ ! -z "$latest_release" ]; then
    # Get the PRs from the latest release
    prs=$(scan_for_prs $repo_arg $latest_release main)
    if [ "$?" -eq 0 ]; then
      for pr in $prs; do
        linked=$(get_linked_issues $repo_arg $pr)
        if [ "$?" -ne 0 ]; then
          # Handle translation and unlinked PRs
          has_translation=$(gh api repos/$repo_arg/pulls/$pr --jq '[.labels[].name] | any(. == "translation")')
          if [ "$has_translation" = "true" ]; then
            translation_prs="${translation_prs}https://github.com/$repo_arg/pull/$pr\n"
          else
            unlinked_prs="${unlinked_prs}https://github.com/$repo_arg/pull/$pr\n"
          fi
        else
          for issue in $linked; do
            parent=$(get_parent_issue_number "NethServer/dev" $issue)
            if [ ! -z "$parent" ]; then
              # This is a child issue
              child_issues[$parent]+="$issue "
              # Store parent's info if we haven't already
              if [ -z "${parent_issues[$parent]}" ]; then
                parent_issues[$parent]=1
                issue_labels[$parent]=$(get_issue_labels "NethServer/dev" $parent)
                issue_status[$parent]=$(is_issue_closed "NethServer/dev" $parent && echo "CLOSED" || echo "OPEN")
              fi
            else
              # This is a parent or standalone issue
              parent_issues[$issue]=1
            fi
            # Store issue info regardless of parent/child status
            issue_labels[$issue]=$(get_issue_labels "NethServer/dev" $issue)
            issue_status[$issue]=$(is_issue_closed "NethServer/dev" $issue && echo "CLOSED" || echo "OPEN")
          done
        fi
      done
    fi
  fi

  # Print summary
  echo "Summary:"
  echo "--------"
  if [ ! -z "$unlinked_prs" ]; then
    echo -e "\033[33mPRs without linked issues:\033[0m"
    echo -e "$unlinked_prs"
  fi
  
  if [ ! -z "$translation_prs" ]; then
    echo -e "\033[36mTranslation PRs:\033[0m"
    echo -e "$translation_prs"
  fi

  # Process and display issues hierarchically
  echo -e "\033[1mIssues:\033[0m"
  # First, display parent issues with their children
  for parent in "${!parent_issues[@]}"; do
    # Skip if this is actually a child issue
    if [ ! -z "$(echo "${child_issues[@]}" | grep -w "$parent")" ]; then
      continue
    fi

    if [ "${issue_status[$parent]}" = "CLOSED" ]; then
      status_color="\033[32m"
    else
      status_color="\033[31m"
    fi
    echo -e "${status_color}[${issue_status[$parent]}]\033[0m https://github.com/NethServer/dev/issues/$parent - ${issue_labels[$parent]}"

    if [ ! -z "${child_issues[$parent]}" ]; then
      for child in ${child_issues[$parent]}; do
        if [ "${issue_status[$child]}" = "CLOSED" ]; then
          status_color="\033[32m"
        else
          status_color="\033[31m"
        fi
        echo -e "  └─ ${status_color}[${issue_status[$child]}]\033[0m https://github.com/NethServer/dev/issues/$child - ${issue_labels[$child]}"
      done
    fi
  done

  # Display standalone issues (no parent or children)
  for issue in "${!issue_labels[@]}"; do
    # Skip if this is a parent or child issue
    if [ ! -z "${child_issues[$issue]}" ] || [ ! -z "$(echo "${child_issues[@]}" | grep -w "$issue")" ]; then
      continue
    fi
    if [ -z "${parent_issues[$issue]}" ]; then
      if [ "${issue_status[$issue]}" = "CLOSED" ]; then
        status_color="\033[32m"
      else
        status_color="\033[31m"
      fi
      echo -e "${status_color}[${issue_status[$issue]}]\033[0m https://github.com/NethServer/dev/issues/$issue - ${issue_labels[$issue]}"
    fi
  done
  
  if [ -z "$unlinked_prs" ] && [ -z "${!parent_issues[@]}" ] && [ -z "${!child_issues[@]}" ]; then
    echo -e "\033[32mAll checks passed! Ready to release.\033[0m"
  fi

elif [ "$subcommand" == "comment" ]; then

  # If the argument `--release-name` is not provided, get the name the latest release
  if [ -z "$release_name_arg" ]; then
    # Get the name the latest release
    release_name_arg=$(gh release list  --repo $repo_arg --json tagName --limit 1 --order desc  --jq '.[0].tagName')
  fi

  create_comment $repo_arg $release_name_arg

elif [ "$subcommand" == "clean" ]; then

  # If no stable release is provided, get the latest stable release
  if [ -z "$release_name_arg" ]; then
    release_name_arg=$(gh release list --repo $repo_arg --exclude-pre-releases --json tagName --limit 1 --order desc --jq '.[0].tagName')
    if [ -z "$release_name_arg" ]; then
      echo "No stable release found in the repository."
      exit 1
    fi
  fi

  clean_releases $repo_arg $release_name_arg

fi
